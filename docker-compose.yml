version: '3.8'
services:
  postgres-db:
    image: postgres:16
    environment:
      POSTGRES_DB: keycloak-auction
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mypassword1234
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5

  keycloak:
    container_name: keycloak-auction
    image: quay.io/keycloak/keycloak:latest
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-db:5432/keycloak-auction
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: Mypassword1234
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "9098:8080"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-net
    command: start-dev

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      - microservices-net

  mail-dev:
    container_name: ms_auction_mail-dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices-net

  mongodb:
    image: mongo
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    #networks:
      #- microservices-net

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8755:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongodb
    #networks:
      #- microservices-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices-net

  #address-service:
    #build:
      #context: ../address-service
      #dockerfile: Dockerfile
      #ports:
      #- "8797:8787"

    #discovery-service:
      #build:
      #context: ../discovery
      #dockerfile: Dockerfile
      #ports:
      #- "8761:8761"

    #gateway-service:
      #build:
      #context: .
      #dockerfile: Dockerfile
      #ports:
      #- "8222:8222"

    #notification-service:
      #build:
      #context: ../notification
      #dockerfile: Dockerfile
      #ports:
      #- "8040:8040"

    #order-service:
      #build:
      #context: ../order_service
      #dockerfile: Dockerfile
      #ports:
      #- "9797:9797"

    #payment-service:
      #build:
      #context: ../payment-service
      #dockerfile: Dockerfile
      #ports:
      #- "8686:8686"

    #product-service:
      #build:
      #context: ../product
      #dockerfile: Dockerfile
      #ports:
      #- "8484:8484"

    #user-service:
      #build:
      #context: ../user
      #dockerfile: Dockerfile
      #ports:
      #- "8040:8040"


networks:
  microservices-net:
    driver: bridge
  #keycloak-network:
    #driver: bridge

volumes:
  postgres_data:
  mongo_data: